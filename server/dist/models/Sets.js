"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
const db_config_1 = __importDefault(require("../db/db.config"));
const Symbols_1 = __importDefault(require("./Symbols"));
class Sets extends sequelize_1.Model {
}
Sets.getSet = async function (game_id, in_box = false) {
    let set = null;
    let symbols = null;
    try {
        set = await Sets.findOne({
            where: {
                game_id: game_id
            }
        });
        if (!set)
            throw true;
        if (in_box)
            symbols = await Symbols_1.default.findAll({
                attributes: ['id', 'value', 'price', 'in_box'],
                where: {
                    set_id: set.id,
                    in_box: true
                }
            });
        else
            symbols = await Symbols_1.default.findAll({
                attributes: ['id', 'value', 'price', 'in_box'],
                where: {
                    set_id: set.id
                }
            });
    }
    catch (err) {
        console.log(err);
    }
    finally {
        return {
            set,
            symbols
        };
    }
};
Sets.generateRuSet = async function (game_id) {
    const symbols = [
        ["а", 1], ["а", 1], ["а", 1], ["а", 1], ["а", 1], ["а", 1], ["а", 1], ["а", 1],
        ["б", 3], ["б", 3],
        ["в", 1], ["в", 1], ["в", 1],
        ["г", 3], ["г", 3],
        ["д", 2], ["д", 2], ["д", 2], ["д", 2],
        ["е", 1], ["е", 1], ["е", 1], ["е", 1], ["е", 1], ["е", 1], ["е", 1], ["е", 1],
        ["ё", 3],
        ["ж", 5],
        ["з", 5], ["з", 5],
        ["и", 1], ["и", 1], ["и", 1], ["и", 1], ["и", 1],
        ["й", 4],
        ["к", 2], ["к", 2], ["к", 2], ["к", 2],
        ["л", 2], ["л", 2], ["л", 2], ["л", 2],
        ["м", 2], ["м", 2], ["м", 2],
        ["н", 1], ["н", 1], ["н", 1], ["н", 1], ["н", 1],
        ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1], ["о", 1],
        ["п", 2], ["п", 2], ["п", 2], ["п", 2],
        ["р", 1], ["р", 1], ["р", 1], ["р", 1], ["р", 1],
        ["с", 1], ["с", 1], ["с", 1], ["с", 1], ["с", 1],
        ["т", 1], ["т", 1], ["т", 1], ["т", 1], ["т", 1],
        ["у", 2], ["у", 2], ["у", 2], ["у", 2],
        ["ф", 10],
        ["х", 5],
        ["ц", 5],
        ["ч", 5],
        ["ш", 8],
        ["щ", 10],
        ["ъ", 10],
        ["ы", 4], ["ы", 4],
        ["ь", 3], ["ь", 3],
        ["э", 8],
        ["ю", 8],
        ["я", 3], ["я", 3],
        ["*", 0], ["*", 0],
    ];
    let set = null;
    try {
        set = await Sets.findOrCreate({
            where: { game_id: game_id },
            defaults: {
                game_id: game_id
            }
        });
        if (!set)
            throw true;
        const { rows, count } = await Symbols_1.default.findAndCountAll({
            where: {
                set_id: set[0].id,
            }
        });
        if (count !== symbols.length) {
            await Symbols_1.default.destroy({
                where: {
                    set_id: set[0].id,
                }
            });
            for (let symbol of symbols) {
                await Symbols_1.default.create({
                    set_id: set[0].id,
                    value: symbol[0],
                    price: symbol[1]
                });
            }
        }
    }
    catch (err) {
        console.log(err);
    }
    finally {
        return {
            set,
            symbols
        };
    }
};
Sets.init({
    id: {
        type: sequelize_1.DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
    game_id: {
        type: sequelize_1.DataTypes.INTEGER,
        allowNull: false,
    }
}, {
    sequelize: db_config_1.default,
    modelName: 'sets'
});
exports.default = Sets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL21vZGVscy9TZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQTZDO0FBQzdDLGdFQUF1QztBQUN2Qyx3REFBZ0M7QUFFaEMsTUFBTSxJQUFLLFNBQVEsaUJBQUs7O0FBSWYsV0FBTSxHQUFHLEtBQUssV0FBVSxPQUFlLEVBQUUsU0FBa0IsS0FBSztJQUNyRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDZixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDbkIsSUFBSTtRQUNGLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDdkIsS0FBSyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxPQUFPO2FBQ2pCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBRyxDQUFDLEdBQUc7WUFDTCxNQUFNLElBQUksQ0FBQztRQUNiLElBQUcsTUFBTTtZQUNQLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsT0FBTyxDQUFDO2dCQUM5QixVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7Z0JBQzlDLEtBQUssRUFBRTtvQkFDTCxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQ2QsTUFBTSxFQUFFLElBQUk7aUJBQ2I7YUFDRixDQUFDLENBQUE7O1lBRUYsT0FBTyxHQUFHLE1BQU0saUJBQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQzlCLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQztnQkFDOUMsS0FBSyxFQUFFO29CQUNMLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRTtpQkFDZjthQUNGLENBQUMsQ0FBQTtLQUNMO0lBQ0QsT0FBTSxHQUFHLEVBQUU7UUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xCO1lBQ087UUFDTixPQUFPO1lBQ0wsR0FBRztZQUNILE9BQU87U0FDUixDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUE7QUFDTSxrQkFBYSxHQUFHLEtBQUssV0FBVSxPQUFlO0lBQ25ELE1BQU0sT0FBTyxHQUFHO1FBQ2QsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUNmLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDZixDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUNmLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUN2QyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDUCxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQy9CLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUMvQixDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUN2QyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDL0Is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